max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date = current_date - 7
and rank <= 3000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 4000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 5000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 6000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 7000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 8000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 9000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 10000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 12500
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 15000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 17500
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
UNION ALL
select
a.warehouse_id,
a.floor_mod,
max(a.rank) as bins,
avg(a.score) as score
from (
select
warehouse_id,
floor_mod,
target_date,
rank,
score
from public.badger_score_2
where
target_date >= current_date - 7
and rank <= 20000
and warehouse_id = 'VLC1'
order by rank asc
) a
group by
a.warehouse_id,
a.floor_mod
) k
join (
select
warehouse_id,
country_code,
case when country_code in ('AE','SA','EG') then 'MENA' else operational_area end as operational_area
from
icqa_eu_ddl.fc_details
where
site_definition = 'AMZN_FC'
and
warehouse_reporting_type not in ('IXD','AmazonFresh','SpecialHandling')
and site_type = 'TNS'
) l
on k.warehouse_id = l.warehouse_id
group by
k.warehouse_id::VARCHAR(5),
k.floor_mod,
k.bins::INTEGER,
k.score::DECIMAL(12,11)
")
tps <- sqlQuery(cct,"
select
a.warehouse_id,
a.bin_mod,
b.restricted,
a.tps_dpmo,
a.bph,
a.hours,
a.counted,
a.defective,
a.calc_dr
from tns_aci_tps a
join tns_aci_floors b
on a.warehouse_id = b.warehouse_id
and a.bin_mod = b.bin_mod
where
a.counted >= 50")
multi  <- sqlQuery(cct,"select * from tns_aci_threshold")
odbcCloseAll()
tps$bin_mod <- substr(tps$bin_mod, 3, 5)
bdg1 <- bdg %>% group_by(warehouse_id, floor_mod) %>% do(tidy(lm(log(score) ~ log(bins), .))) %>% select(warehouse_id,floor_mod,term,estimate)
bdg2 <- bdg1 %>% pivot_wider(names_from = term, values_from = estimate) %>% rename(slope = 'log(bins)',intercept = '(Intercept)') %>% mutate(exp_int = exp(intercept))
bdg_fl <- left_join(bdg2,tps, by=c('warehouse_id' = 'warehouse_id', 'floor_mod' = 'bin_mod')) %>% select(-intercept) %>% mutate(score_dr = exp_int*(counted^slope), number = calc_dr/score_dr, dipch = ifelse((defective/hours) == 0, 0.01, defective/hours)) %>% drop_na()
ttl_dipch <- bdg_fl %>% group_by(warehouse_id) %>% summarise(ttl_dipch = sum(dipch), ttl_hrs = sum(hours))
fc_dipch <- bdg_fl %>% group_by(warehouse_id) %>% summarise(fc_dipch = sum(defective)/sum(hours))
ttl_tps <- tps %>% group_by(warehouse_id) %>% summarise(fc_tps = sum(tps_dpmo))
hrs_add <- left_join(bdg_fl,ttl_dipch, by = 'warehouse_id') %>% mutate(dipch_share = dipch/ttl_dipch, fin_hrs = ttl_hrs*dipch_share, fin_hrs2 = ifelse(fin_hrs > hours & restricted == 1, fin_hrs - hours, 0)) %>% select(warehouse_id, fin_hrs2) %>% group_by(warehouse_id) %>% summarise(add_hrs = sum(fin_hrs2))
hrs_rest <- left_join(bdg_fl,ttl_dipch, by = 'warehouse_id') %>% mutate(dipch_share = dipch/ttl_dipch, fin_hrs = ttl_hrs*dipch_share, fin_hrs2 = ifelse(fin_hrs > hours & restricted == 1, hours, fin_hrs), cond = ifelse(fin_hrs > hours & restricted == 1, 1, 0)) %>% select(warehouse_id, floor_mod, hours, fin_hrs, fin_hrs2, cond) %>% filter(cond == 0)  %>% group_by(warehouse_id) %>% summarise(ttl1 = sum(fin_hrs2))
hrs_fin <- left_join(bdg_fl,ttl_dipch, by = 'warehouse_id') %>% mutate(dipch_share = dipch/ttl_dipch, fin_hrs = ttl_hrs*dipch_share, fin_hrs2 = ifelse(fin_hrs > hours & restricted == 1, hours, fin_hrs), cond = ifelse(fin_hrs > hours & restricted == 1, 1, 0)) %>% select(warehouse_id, floor_mod, hours, fin_hrs, fin_hrs2, cond, bph)
hrs_fin1 <- left_join(hrs_fin, hrs_add, by = 'warehouse_id')
hrs_fin2 <- left_join(hrs_fin1,hrs_rest, by = 'warehouse_id') %>% mutate(hrs_sh = ifelse(cond == 0, (fin_hrs2/ttl1)*add_hrs, 0), finn_hrs = fin_hrs2+hrs_sh) %>% select(1,2,11)
bdg_fl2 <- left_join(bdg_fl,ttl_dipch, by = 'warehouse_id')
bdg_fl2mt <- left_join(bdg_fl2, multi, by = 'warehouse_id')
bdg_fl2a <- left_join(bdg_fl2mt,hrs_fin2, by = c('warehouse_id' = 'warehouse_id', 'floor_mod' = 'floor_mod'))
bdg_fl2b <- left_join(bdg_fl2a, ttl_tps, by = 'warehouse_id') %>% mutate(dipch_share = dipch/ttl_dipch, bti = round((finn_hrs*bph) + ((finn_hrs*bph)*multiplicator),0) + round(((finn_hrs*bph)*(tps_dpmo/fc_tps))/2,0)) %>% select(-defective, -calc_dr, -ttl_dipch, -ttl_hrs, -multiplicator)
bdg_fl2c <- left_join(bdg_fl2b, fc_dipch, by = 'warehouse_id') %>% mutate(pred_def = round(bti * ((exp_int*(bti^slope))*number),0), pred_hrs = bti/bph, pred_dipch = pred_def/pred_hrs)
bdg_fl3 <- bdg_fl2c
predicted_dipch <- bdg_fl3 %>% group_by(warehouse_id) %>% summarise(predicted_dipch = sum(pred_def)/sum(pred_hrs))
final <- left_join(bdg_fl3,predicted_dipch, by = 'warehouse_id') %>% rename(predicted_fc_dipch = predicted_dipch) %>% mutate(dipch_improvement = (predicted_fc_dipch/fc_dipch)-1) %>% select(-slope, -exp_int, -number, -dipch_share, -finn_hrs, -pred_def, -pred_hrs) %>% relocate(pred_dipch, .after=dipch)
fnl <- final %>% mutate_at(vars(contains('dipch')), list(~round(., 2))) %>% mutate(bti = round(bti,digits = 0)) %>% select(-tps_dpmo, -score_dr, -restricted) %>% relocate(hours, .after = counted) %>% relocate(bph, .after = hours) %>% mutate(hours = round(hours, 2))
mydb <- dbConnect(MySQL(), group = 'Central_Count', default.file = set)
dbWriteTable(mydb, "tns_aci_regr", fnl, overwrite = TRUE, row.names=FALSE)
dbDisconnect(mydb)
set <- "C:/Users/awwojtas/Desktop/R/.my.cnf"
mydb <- dbConnect(MySQL(), group = 'Central_Count', default.file = set)
dbWriteTable(mydb, "tns_aci_regr", fnl, overwrite = TRUE, row.names=FALSE)
dbDisconnect(mydb)
# final bin injection
fnl_1 <- fnl %>% select(warehouse_id, floor_mod, bti) %>% mutate(floor_mod = paste0('P-', floor_mod)) %>% filter(floor_mod %in% c('P-1-A','P-1-B'))
cct <- dbConnect(odbc(), "MySQL CCT")
cct <- odbcConnect("Central_Count")
for(fm in fnl_1$floor_mod){
aa <- fnl_1 %>% filter(floor_mod == fm) %>% select(floor_mod)
bb <- fnl_1 %>% filter(floor_mod == fm) %>% select(bti)
mod <- aa[[1]]
bns <- bb[[1]]
bt <- dbGetQuery(cct,
sprintf("select warehouse_id, bin_mod, bin_id from tns_aci
where warehouse_id = 'VLC1' and bin_mod = '%s' order by final_score asc limit %s", mod, bns))
assign(paste(fm, fnl_1$warehouse_id[[1]], sep = '_'),bt)
}
dbDisconnect(cct)
for(fm in fnl_1$floor_mod){
aa <- fnl_1 %>% filter(floor_mod == fm) %>% select(floor_mod)
bb <- fnl_1 %>% filter(floor_mod == fm) %>% select(bti)
mod <- aa[[1]]
bns <- bb[[1]]
bt <- sqlQuery(cct,
sprintf("select warehouse_id, bin_mod, bin_id from tns_aci
where warehouse_id = 'VLC1' and bin_mod = '%s' order by final_score asc limit %s", mod, bns))
assign(paste(fm, fnl_1$warehouse_id[[1]], sep = '_'),bt)
}
dbDisconnect(cct)
ptr <- paste0('_',fnl_1$warehouse_id[[1]])
final_fn <- do.call(rbind, mget(ls(pattern = ptr))) %>% remove_rownames()
final_fn$aws_created <- Sys.time() + lubridate::hours(1)
#final_fn  <- head(final_fn, 1)
mydb <- dbConnect(MySQL(), group = 'Central_Count', default.file = set)
dbWriteTable(mydb, "tns_aci_final", final_fn, overwrite = TRUE, row.names=FALSE)
dbDisconnect(mydb)
cct <- dbConnect(odbc(), "MySQL CCT")
for(fm in fnl_1$floor_mod){
aa <- fnl_1 %>% filter(floor_mod == fm) %>% select(floor_mod)
bb <- fnl_1 %>% filter(floor_mod == fm) %>% select(bti)
mod <- aa[[1]]
bns <- bb[[1]]
bt <- sqlQuery(cct,
sprintf("select warehouse_id, bin_mod, bin_id from tns_aci
where warehouse_id = 'VLC1' and bin_mod = '%s' order by final_score asc limit %s", mod, bns))
assign(paste(fm, fnl_1$warehouse_id[[1]], sep = '_'),bt)
}
odbcCloseAll()
ptr <- paste0('_',fnl_1$warehouse_id[[1]])
final_fn <- do.call(rbind, mget(ls(pattern = ptr))) %>% remove_rownames()
final_fn$aws_created <- Sys.time() + lubridate::hours(1)
#final_fn  <- head(final_fn, 1)
mydb <- dbConnect(MySQL(), group = 'Central_Count', default.file = set)
dbWriteTable(mydb, "tns_aci_final", final_fn, overwrite = TRUE, row.names=FALSE)
dbDisconnect(mydb)
final_fn_s3  <- final_fn[1]
final_fn <- do.call(rbind, mget(ls(pattern = ptr))) %>% remove_rownames()
ptr
aa
bb
mod
bns
bns <- bb[[2]]
bns
aa
mod <- aa[[2]]
bns <- bb[[3]]
mode
mod
bns
install.packages("RPostgres")
install.packages("dbplyr")
install.packages("dbplyr")
library(RPostgres)
dhs <- dbConnect(RPostgres(),
dbname = "dachs",
host = "centralcount-dachs.clvl8ocaiw9z.us-east-1.redshift.amazonaws.com",
port = 8200,
user = "redshiftroot",
password = "Meles0meles")
drv <- dbDriver("PostgreSQL")
dhs <- dbConnect(RPostgres::Postgres(),
dbname = "dachs",
host = "centralcount-dachs.clvl8ocaiw9z.us-east-1.redshift.amazonaws.com",
port = 8200,
user = "redshiftroot",
password = "Meles0meles")
dbGetQuery(dhs,
"select
warehouse_id,
operational_area,
site_type
from eu_icqa_ddl.fc_details
limit 10
")
dbGetQuery(dhs,
"select
warehouse_id,
operational_area,
site_type
from icqa_eu_ddl.fc_details
limit 10
")
fcs <- dbGetQuery(dhs,
"select
warehouse_id,
operational_area,
site_type
from icqa_eu_ddl.fc_details
limit 10
")
dbDisconnect(cct)
dbDisconnect(dhs)
library(shiny); runApp('argon/argon.R')
runApp('argon/argon.R')
runApp('argon/argon.R')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
runApp('C:/Users/awwojtas/Desktop/tabler1')
library(argonDash)
argonDashGallery()
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
cct <- odbcConnect("Central_Count")
dt <- sqlQuery(cct, "select * from irdr_pred_seb")
odbcCloseAll()
dt <- dt %>% mutate(operational_area = recode(operational_area,"MEN"="MENA"), ywk = week)
dt
cct <- odbcConnect("Central_Count")
dt <- sqlQuery(cct, "select * from irdr_pred_seb")
odbcCloseAll()
dt <- dt %>% mutate(operational_area = recode(operational_area,"MEN"="MENA"), ywk = week) %>% drop_na() %>% filter(def_inject != 0)
dt
runApp('C:/Users/awwojtas/Desktop/arg_test_devdesk')
library(portfoliodown)
new_portfolio_site()
new_portfolio_site()
remove.packages(portfoliodown)
remove.packages("portfoliodown")
install.packages("portfoliodown")
install.packages("portfoliodown")
devtools::install_github("business-science/portfoliodown")
library(portfoliodown)
new_portfolio_site()
getwd()
setwd("C:/Users/awwojtas/Desktop/temp_r")
new_portfolio_site()
#new_portfolio_site()
serve_site()
#new_portfolio_site()
serve_site()
#new_portfolio_site()
serve_site()
#new_portfolio_site()
serve_site()
#new_portfolio_site()
serve_site()
stop_server()
#new_portfolio_site()
serve_site()
stop_server()
#new_portfolio_site()
serve_site()
stop_server()
